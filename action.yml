name: Install and Run Depenedency Scripts

description: Downloads database dependency scripts and runs them against the specified database

inputs:
  db-server-name:
    description: The server where the dependency files will be run.
    required: true
  db-name:
    description: The name of the database where the dependency files will run.
    required: true
  dependency-list:
    description: A json string containing a list of objects with the name of the dependency package, the version, and the url where the package is stored.
    required: true
  use-integrated-security:
    description: Use domain integrated security. If false, a db-username and db-password should be specified. If true, those parameters will be ignored if specified.
    required: true
    default: 'false'
  username:
    description: The username to use to login to the database. This is required if use-integrated-security is false, otherwise it's optional and will be ignored.
    required: false
  password:
    description: The password for the user logging in to the database. This is required if use-integrated-security is false, otherwise it's optional and will be ignored.
    required: false

runs:
  using: 'composite'
  steps:
    - name: Install DB Dependencies
      shell: pwsh
      run: |
        $parsedDependencies = ConvertFrom-Json "${{ inputs.dependency-list }}"
        ${{ github.action_path }}\src\download-db-dependencies.ps1 -dependencies $parsedDependencies

    - name: Run DB Dependencies
      shell: pwsh
      run: |
        [System.Security.SecureString] $securePassword = if(!!"${{ inputs.password }}") { ConvertTo-SecureString "${{ inputs.password }}" -AsPlainText -Force } else { $null }

        ${{ github.action_path }}\src\run-db-dependencies.ps1 `
          -dbServer "${{ inputs.db-server-name }}" `
          -dbName "${{ inputs.db-name }}" `
          -useIntegratedSecurity:$${{ inputs.use-integrated-security }} `
          -username "${{ inputs.username }}" `
          -password $securePassword
